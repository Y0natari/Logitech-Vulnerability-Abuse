#include <iostream>
#include <thread>
#include <chrono>
#include "mouse.h"
#include "customsleep.h"

int main() {
    Mouse mouse;
    CTimer Excess; // Timer to track excess time
    SetTimerResolution(); // Set the system timer resolution
    double timer = Global::TimerResolution; // Get the timer resolution
    if (!mouse.Open())
    {
        printf("[-] Failed to open ghub macro driver\n");
        return 0;
    }
    else
    {
        printf("[+] Initialized driver\n");
    }

    while (true) {
        std::this_thread::sleep_for(std::chrono::milliseconds(10)); // Sleep for 10 milliseconds
        if ((GetAsyncKeyState(VK_LBUTTON) & 0x8000) && (GetAsyncKeyState(VK_RBUTTON) & 0x8000)) { //if LBM && RBM are pressed
            mouse.Move(0, 0, 1, 0); // Move the mouse to the relative coordinate (0, 1)
            AccurateSleep(1, Excess); // Accurate sleep for 1 millisecond
        }
    }
    mouse.Close(); // Close the mouse device

    return 0;
}
